// account.js - X·ª≠ l√Ω trang t√†i kho·∫£n

document.addEventListener('DOMContentLoaded', function() {
    console.log('üë§ Account page loaded');
    
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (!currentUser) {
        window.location.href = 'index.html';
        return;
    }
    
    // C·∫≠p nh·∫≠t th√¥ng tin header
    updateHeaderInfo(currentUser);
    
    // Kh·ªüi t·∫°o sidebar
    initSidebar();
    
    // T·∫£i th√¥ng tin t√†i kho·∫£n
    loadAccountInfo(currentUser);
    
    // T·∫£i tools ƒëang ho·∫°t ƒë·ªông
    loadActiveTools(currentUser);
    
    // T·∫£i giao d·ªãch g·∫ßn ƒë√¢y
    loadRecentTransactions(currentUser);
    
    console.log('‚úÖ Account page initialized');
});

// C·∫≠p nh·∫≠t th√¥ng tin header
function updateHeaderInfo(user) {
    const usernameEl = document.getElementById('headerUsername');
    const balanceEl = document.getElementById('headerBalance');
    
    if (usernameEl) usernameEl.textContent = user.username;
    if (balanceEl) balanceEl.textContent = formatCurrency(user.balance);
}

// ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
function formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(amount);
}

// Kh·ªüi t·∫°o sidebar
function initSidebar() {
    const menuIcon = document.getElementById('menuIcon');
    const sidebar = document.getElementById('sidebar');
    
    if (menuIcon && sidebar) {
        menuIcon.addEventListener('click', function() {
            sidebar.classList.toggle('active');
        });
    }
    
    // Hi·ªÉn th·ªã admin panel link n·∫øu l√† admin
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser && currentUser.isAdmin) {
        const adminLink = document.getElementById('adminPanelLink');
        if (adminLink) adminLink.classList.remove('hidden');
    }
}

// T·∫£i th√¥ng tin t√†i kho·∫£n
function loadAccountInfo(user) {
    // Th√¥ng tin c∆° b·∫£n
    document.getElementById('infoUsername').textContent = user.username;
    document.getElementById('infoType').textContent = user.isAdmin ? 'Qu·∫£n tr·ªã vi√™n' : 'Ng∆∞·ªùi d√πng th∆∞·ªùng';
    document.getElementById('infoCreatedAt').textContent = new Date(user.createdAt).toLocaleDateString('vi-VN');
    document.getElementById('infoStatus').textContent = 'ƒêang ho·∫°t ƒë·ªông';
    
    // S·ªë d∆∞
    document.getElementById('balanceAmount').textContent = formatCurrency(user.balance);
    
    // Th·ªëng k√™
    calculateUserStats(user);
}

// T√≠nh to√°n th·ªëng k√™ ng∆∞·ªùi d√πng
function calculateUserStats(user) {
    const purchaseHistory = JSON.parse(localStorage.getItem('purchaseHistory')) || [];
    const userHistory = purchaseHistory.filter(item => item.username === user.username);
    
    // T·ªïng chi ti√™u
    const totalSpent = userHistory.reduce((sum, item) => sum + item.price, 0);
    document.getElementById('totalSpent').textContent = formatCurrency(totalSpent);
    
    // S·ªë tool ƒë√£ mua
    document.getElementById('toolsBought').textContent = userHistory.length;
    
    // S·ªë tool ƒëang ho·∫°t ƒë·ªông
    const activeToolsCount = userHistory.filter(item => item.expiry > Date.now()).length;
    document.getElementById('activeTools').textContent = activeToolsCount;
}

// T·∫£i tools ƒëang ho·∫°t ƒë·ªông
function loadActiveTools(user) {
    const purchaseHistory = JSON.parse(localStorage.getItem('purchaseHistory')) || [];
    const activeTools = purchaseHistory.filter(item => 
        item.username === user.username && item.expiry > Date.now()
    );
    
    const activeToolsList = document.getElementById('activeToolsList');
    
    if (activeTools.length === 0) {
        activeToolsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">‚ö°</div>
                <div class="empty-title">Kh√¥ng c√≥ tool n√†o ƒëang ho·∫°t ƒë·ªông</div>
                <div class="empty-description">H√£y mua tool ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng</div>
            </div>
        `;
        return;
    }
    
    // S·∫Øp x·∫øp theo th·ªùi gian h·∫øt h·∫°n
    activeTools.sort((a, b) => a.expiry - b.expiry);
    
    activeToolsList.innerHTML = activeTools.map(tool => {
        const timeLeft = tool.expiry - Date.now();
        const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        
        return `
            <div class="active-tool-item">
                <div class="tool-info">
                    <div class="tool-name">${getToolDisplayName(tool.toolName)}</div>
                    <div class="tool-key">Key: ${tool.key}</div>
                </div>
                <div class="tool-timer">
                    <div class="timer-icon">‚è±Ô∏è</div>
                    <div class="timer-text">
                        C√≤n l·∫°i: ${hoursLeft > 0 ? hoursLeft + 'h ' : ''}${minutesLeft}p
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// T·∫£i giao d·ªãch g·∫ßn ƒë√¢y
function loadRecentTransactions(user) {
    const purchaseHistory = JSON.parse(localStorage.getItem('purchaseHistory')) || [];
    const userHistory = purchaseHistory.filter(item => item.username === user.username);
    
    const recentTransactions = document.getElementById('recentTransactions');
    
    if (userHistory.length === 0) {
        recentTransactions.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìä</div>
                <div class="empty-title">Ch∆∞a c√≥ giao d·ªãch n√†o</div>
                <div class="empty-description">L·ªãch s·ª≠ giao d·ªãch s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y</div>
            </div>
        `;
        return;
    }
    
    // S·∫Øp x·∫øp theo th·ªùi gian mua m·ªõi nh·∫•t
    userHistory.sort((a, b) => b.purchaseDate - a.purchaseDate);
    
    // Ch·ªâ l·∫•y 5 giao d·ªãch g·∫ßn nh·∫•t
    const recent = userHistory.slice(0, 5);
    
    recentTransactions.innerHTML = recent.map(transaction => {
        const isActive = transaction.expiry > Date.now();
        
        return `
            <div class="transaction-item">
                <div class="transaction-header">
                    <div class="transaction-tool">${getToolDisplayName(transaction.toolName)}</div>
                    <div class="transaction-amount ${isActive ? 'success' : 'expired'}">
                        ${formatCurrency(transaction.price)}
                    </div>
                </div>
                <div class="transaction-details">
                    <div class="transaction-date">
                        ${new Date(transaction.purchaseDate).toLocaleDateString('vi-VN')}
                    </div>
                    <div class="transaction-status ${isActive ? 'active' : 'expired'}">
                        ${isActive ? 'ƒêang ho·∫°t ƒë·ªông' : 'ƒê√£ h·∫øt h·∫°n'}
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function getToolDisplayName(toolKey) {
    const toolNames = {
        'toolv1': 'Tool V1 - D·ª± ƒëo√°n T√†i X·ªâu',
        'toolmd5': 'Tool MD5 - Gi·∫£i m√£ MD5',
        'toolsicbo': 'Tool Sicbo - Ph√°t hi·ªán B√ÉO'
    };
    return toolNames[toolKey] || toolKey;
}

// ƒêƒÉng xu·∫•t
function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = 'index.html';
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    if (!notification) {
        alert(message);
        return;
    }
    
    const messageEl = notification.querySelector('.notification-message');
    if (!messageEl) return;
    
    messageEl.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}
// utils.js - ƒê·ªìng b·ªô d·ªØ li·ªáu gi·ªØa c√°c tab/thi·∫øt b·ªã
function syncData() {
    // L·∫Øng nghe thay ƒë·ªïi t·ª´ c√°c tab kh√°c
    window.addEventListener('storage', function(e) {
        if (e.key === 'users' || e.key === 'tools' || e.key === 'vouchers' || e.key === 'purchaseHistory') {
            console.log('üîÑ Data synced from other tab:', e.key);
            location.reload();
        }
    });
    
    // Th√¥ng b√°o khi d·ªØ li·ªáu thay ƒë·ªïi
    function notifyDataChange(key) {
        localStorage.setItem(key + '_sync', Date.now().toString());
    }
    
    return { notifyDataChange };
}

// Th√™m v√†o m·ªói file JS sau khi kh·ªüi t·∫°o
const dataSync = syncData();
